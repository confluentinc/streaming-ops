
# ###############################################
# For Kafka, the following values can be
# overridden by a 'traditional' Kafka
# properties file
bootstrap.servers=localhost:9092
security.protocol=PLAINTEXT
sasl.jaas.config=
ssl.endpoint.identification.algorithm=
sasl.mechanism=
replication.factor=1
schema.registry.url=http://localhost:8081
basic.auth.credentials.source=
schema.registry.basic.auth.user.info=
# ###############################################

# Spring Kafka
spring.kafka.properties.bootstrap.servers=${bootstrap.servers}
spring.kafka.properties.security.protocol=${security.protocol}
spring.kafka.properties.sasl.jaas.config=${sasl.jaas.config}
spring.kafka.properties.sasl.mechanism=${sasl.mechanism}
spring.kafka.properties.ssl.endpoint.identification.algorithm=${ssl.endpoint.identification.algorithm}
spring.kafka.properties.replication.factor=${replication.factor}

# Spring Schema Registry
spring.kafka.properties.schema.registry.url=${schema.registry.url}
spring.kafka.properties.basic.auth.credentials.source=${basic.auth.credentials.source}
spring.kafka.properties.schema.registry.basic.auth.user.info=${schema.registry.basic.auth.user.info}

# Spring Kafka Producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# Spring Kafka Consumer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# Spring Kafka Streams
spring.kafka.streams.application-id=OrdersService
spring.kafka.streams.properties.default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.kafka.streams.properties.default.value.serde=io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde

